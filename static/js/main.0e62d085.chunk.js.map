{"version":3,"sources":["components/NavMenu.tsx","components/Layout.tsx","components/Home.tsx","components/Table.tsx","models/Comparer.ts","components/Ranking.tsx","components/StatsContext.ts","components/Chart.tsx","components/Summary.tsx","common/math.helper.ts","components/Stats.tsx","components/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavMenu","props","toggleNavbar","setState","collapsed","state","toggleDarkMode","checked","localStorage","setItem","isDarkModeEnabled","element","document","body","classList","add","remove","sessionValue","getItem","window","matchMedia","matches","this","Navbar","className","light","Container","NavbarBrand","tag","Link","to","src","height","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","style","marginTop","onChange","checkedIcon","icon","faMoon","marginLeft","onColor","uncheckedIcon","faSun","NavLink","Component","displayName","name","Layout","children","Home","href","target","rel","TableType","Comparer","x","y","Ranking","listRef","React","createRef","useEffect","current","scrollTo","data","CustomScrollbars","onScroll","forwardedRef","refSetter","useCallback","scrollbarsRef","view","ref","overflow","CustomScrollbarsVirtualList","forwardRef","itemCount","length","itemSize","width","outerElementType","index","_","row","onSubsetChanged","columns","map","isLink","selector","faPlayCircle","header","areEqual","prevProps","nextProps","memo","StatsContext","createContext","listeningHistory","since","Date","allData","minDate","maxDate","StatsProvider","Provider","Chart","useState","chartFuncId","context","useContext","small","undefined","subset","chartFuncs","getHours","getDay","monthValue","daysOfWeek","xAxisFuncs","toString","padStart","Math","floor","date","getFullYear","getMonth","nthMonth","n","firstDate","nthDate","setMonth","emptyData","range","select","totalTime","totalPlaybacks","mostPlayedTrack","mostPlayedArtist","toArray","d1","d2","months","monthDiff","chartData","from","groupBy","time","g","key","count","titleUrl","orderByDescending","first","title","channelName","channelUrl","union","Fragment","description","ButtonGroup","size","Button","active","color","ResponsiveContainer","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","content","payload","label","Line","type","stroke","strokeWidth","Table","tableType","artistOnly","searchPhrase","orderByColumn","descendingOrder","scrollPosition","listeningHistorySubset","subsetDescription","prevCount","prevId","result","trackAndArtist","groupByProperty","i","id","res","playedTimes","entries","where","toLowerCase","indexOf","orderBy","reverse","s","typeChanged","flex","display","textAlign","placeholder","borderRadius","e","value","column","Summary","precision","totalPlayCount","differentArtists","distinct","utc1","UTC","getDate","utc2","days","summary","dailyAverage","round","pow","now","dateChanged","fontSize","clearIcon","c","Stats","progress","files","jsonFiles","endsWith","JSZip","loadAsync","then","f","Promise","all","Object","keys","filename","async","fileData","File","forEach","r","push","loadFile","results","JSON","parse","flat","substring","listeningEntries","subtitles","url","getElementById","scrollIntoView","file","resolve","reject","fileReader","FileReader","onload","onerror","onabort","readAsText","onDrop","getRootProps","getInputProps","newData","About","App","baseUrl","getElementsByTagName","getAttribute","basename","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e62d085.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport {\n  Collapse,\n  Container,\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  NavItem,\n  NavLink,\n} from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport Switch from \"react-switch\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSun, faMoon } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./NavMenu.css\";\n\nexport interface NavMenuProps {}\n\nexport interface NavMenuState {\n  collapsed: boolean;\n  isDarkModeEnabled: boolean;\n}\n\nexport class NavMenu extends Component<NavMenuProps, NavMenuState> {\n  static displayName = NavMenu.name;\n\n  constructor(props: Readonly<NavMenuProps>) {\n    super(props);\n\n    this.state = {\n      collapsed: true,\n      isDarkModeEnabled: false,\n    };\n  }\n\n  componentDidMount() {\n    let sessionValue = localStorage.getItem(\"darkMode\");\n    if (\n      sessionValue === \"true\" ||\n      (!sessionValue &&\n        window.matchMedia &&\n        window.matchMedia(\"(prefers-color-scheme: dark)\").matches)\n    ) {\n      this.toggleDarkMode(true);\n    }\n  }\n\n  toggleNavbar = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  toggleDarkMode = (checked: boolean) => {\n    localStorage.setItem(\"darkMode\", checked ? \"true\" : \"false\");\n    this.setState({ isDarkModeEnabled: checked }, () => {\n      const element = document.body;\n      if (checked) {\n        element.classList.add(\"dark-mode\");\n      } else {\n        element.classList.remove(\"dark-mode\");\n      }\n    });\n  };\n\n  render() {\n    return (\n      <header>\n        <Navbar\n          className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\"\n          light\n        >\n          <Container>\n            <NavbarBrand tag={Link} to=\"/\">\n              <img src=\"./logo192.png\" height=\"40px\" alt=\"Logo\" /> Your YT Stats\n            </NavbarBrand>\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n            <Collapse\n              className=\"d-sm-inline-flex flex-sm-row-reverse\"\n              isOpen={!this.state.collapsed}\n              navbar\n            >\n              <ul className=\"navbar-nav flex-grow\">\n                <NavItem style={{ marginTop: 8 }}>\n                  <Switch\n                    checked={this.state.isDarkModeEnabled}\n                    onChange={this.toggleDarkMode}\n                    height={26}\n                    checkedIcon={\n                      <FontAwesomeIcon\n                        icon={faMoon}\n                        style={{ marginLeft: 5 }}\n                      />\n                    }\n                    onColor=\"#cc4b4c\"\n                    uncheckedIcon={\n                      <FontAwesomeIcon\n                        icon={faSun}\n                        style={{ marginLeft: 10 }}\n                      />\n                    }\n                  />\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">\n                    Instructions\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/stats\">\n                    Stats\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/about\">\n                    About\n                  </NavLink>\n                </NavItem>\n              </ul>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport { NavMenu } from './NavMenu';\n\nexport class Layout extends Component {\n  static displayName = Layout.name;\n\n  render () {\n    return (\n      <div>\n        <NavMenu />\n        <Container>\n          {this.props.children}\n        </Container>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class Home extends Component {\n  static displayName = Home.name;\n\n  render() {\n    return (\n      <div>\n        <h1>How to use it</h1>\n        <ol className=\"instructions\">\n          <li>Go to <a href=\"https://takeout.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Google Takeout</a></li>\n          <li>Deselect all products</li>\n          <li>Scroll down to <i>YouTube and YouTube Music</i> section and select it</li>\n          <li>Click on <i>Multiple formats</i> button</li>\n          <li>In a modal find <i>History</i> section and select <b>JSON</b> in a file format dropdown</li>\n          <li>Click on <i>All YouTube data included</i> button</li>\n          <li>In a modal click on  <i>Deselect all</i> button and select <b>history</b> option</li>\n          <li>Go to <b>Next step</b></li>\n          <li>Leave the default values and click on <b>Create export</b></li>\n          <li>Wait a couple of minutes. You will receive an email from Google Takeout</li>\n          <li>Download the file</li>\n          <li>Add your Google Takeout file <Link to=\"/stats\">HERE</Link></li>\n        </ol>\n      </div>\n    );\n  }\n}\n","import { from } from \"linq-to-typescript\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { ButtonGroup, Button } from \"reactstrap\";\nimport \"./Table.css\";\nimport Comparer from \"../models/Comparer\";\nimport { StatColumn, StatRow } from \"../models/StatRow\";\nimport Ranking from \"./Ranking\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport Chart from \"./Chart\";\nimport StatsContext from \"./StatsContext\";\n\ninterface TabProps {}\n\ninterface TabState {\n  tableType: TableType;\n  searchPhrase: string;\n  orderByColumn: number;\n  descendingOrder: boolean;\n  scrollPosition: number;\n  data: StatRow[];\n  listeningHistorySubset: ListeningEntry[];\n  subsetDescription: string;\n}\n\nenum TableType {\n  trackAndArtist = 0,\n  artistOnly = 1,\n}\n\nconst Table: React.FC<TabProps> = (props) => {\n  const [state, setState] = useState<TabState>({\n    tableType: TableType.artistOnly,\n    searchPhrase: \"\",\n    orderByColumn: 0,\n    descendingOrder: false,\n    scrollPosition: 0,\n    data: [],\n    listeningHistorySubset: [],\n    subsetDescription: \"\",\n  });\n\n  const groupByProperty = (\n    type: TableType\n  ): ((x: ListeningEntry) => string) => {\n    switch (type) {\n      case TableType.trackAndArtist:\n        return (x) => x.titleUrl;\n      case TableType.artistOnly:\n        return (x) => x.channelUrl;\n    }\n  };\n\n  const context = useContext(StatsContext);\n\n  useEffect(() => {\n    let prevCount = 0;\n    let prevId = 1;\n\n    let result = from(context.listeningHistory)\n      .groupBy(groupByProperty(state.tableType))\n      .select((x) => ({ x, count: x.count() }))\n      .orderByDescending((x) => x.count, Comparer)\n      .select(({ x, count }, i) => {\n        const id = count === prevCount ? prevId : i + 1;\n        const res = {\n          ...x.first(),\n          id: id,\n          playedTimes: count,\n          entries: x.toArray(),\n        };\n        prevCount = count;\n        prevId = id;\n        return res;\n      })\n      .where(\n        (x) =>\n          x.channelName.toLowerCase().indexOf(state.searchPhrase) > -1 ||\n          (state.tableType === TableType.trackAndArtist &&\n            x.title.toLowerCase().indexOf(state.searchPhrase) > -1)\n      );\n\n    switch (state.orderByColumn) {\n      case 0:\n        result = result.orderBy((x) => x.id, Comparer);\n        break;\n      case 1:\n        result = result.orderBy((x) => x.title);\n        break;\n      case 2:\n        result = result.orderBy((x) => x.channelName);\n        break;\n      case 3:\n        result = result.orderBy((x) => x.id, Comparer);\n        break;\n    }\n\n    if (state.descendingOrder) result = result.reverse();\n\n    setState((s) => ({ ...s, data: result.toArray() }));\n  }, [\n    context.listeningHistory,\n    state.descendingOrder,\n    state.orderByColumn,\n    state.searchPhrase,\n    state.tableType,\n  ]);\n\n  const orderByChanged = (column: number) => {\n    if (state.orderByColumn === column)\n      setState({ ...state, descendingOrder: !state.descendingOrder });\n    else setState({ ...state, descendingOrder: false, orderByColumn: column });\n  };\n\n  const typeChanged = (type: TableType) =>\n    setState({\n      ...state,\n      tableType: type,\n      orderByColumn: 0,\n      descendingOrder: false,\n    });\n\n  const onRowSelected = (row: StatRow) => {\n    const description =\n      state.tableType === TableType.artistOnly\n        ? row.channelName\n        : `${row.title} by ${row.channelName}`;\n    setState({\n      ...state,\n      listeningHistorySubset: row.entries,\n      subsetDescription: description,\n    });\n  };\n\n  const onSearchedTextChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, searchPhrase: e.target.value.toLowerCase() });\n  };\n\n  const columns: StatColumn[] = [\n    {\n      header: \"#\",\n      selector: (x: StatRow) => x.id,\n      style: { flex: 1 },\n    },\n    {\n      header: \"Title\",\n      selector: (x: StatRow) => x.title,\n      style: {\n        flex: 10,\n        ...(state.tableType === TableType.artistOnly ? {display: \"none\"} : {})\n      },\n    },\n    {\n      header: \"Channel\",\n      selector: (x: StatRow) => x.channelName,\n      style: { flex: 10 },\n    },\n    {\n      header: \"Your views\",\n      selector: (x: StatRow) => x.playedTimes,\n      style: { flex: 2 },\n    },\n    {\n      header: \"Watch\",\n      selector: (x: StatRow) =>\n        state.tableType === TableType.trackAndArtist\n          ? x.titleUrl\n          : x.channelUrl,\n      style: { flex: 1, textAlign: \"center\" },\n      isLink: true,\n    }\n  ];\n\n  return (\n    <React.Fragment>\n      <div className=\"d-flex align-items-center mb-1\">\n        <div style={{ flex: 1 }}>\n          <span className=\"section-header\">Most watched</span>\n        </div>\n        <div style={{ flex: 1 }}>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Search\"\n            style={{ borderRadius: 50 }}\n            onChange={onSearchedTextChanged}\n          />\n          <small>Found: {state.data.length}</small>\n        </div>\n      </div>\n\n      <ButtonGroup className=\"d-flex mb-3\" size=\"md\">\n        <Button\n          active={state.tableType === TableType.trackAndArtist}\n          color=\"primary\"\n          onClick={() => typeChanged(TableType.trackAndArtist)}\n        >\n          Most watched videos\n        </Button>\n        <Button\n          active={state.tableType === TableType.artistOnly}\n          color=\"primary\"\n          onClick={() => typeChanged(TableType.artistOnly)}\n        >\n          Most watched channels\n        </Button>\n      </ButtonGroup>\n\n      <div className=\"data-header\">\n        {columns.map((x, i) => (\n          <div\n            key={i}\n            className={\n              \"data-cell\" + (state.orderByColumn === i ? \" order-by\" : \"\")\n            }\n            style={x.style}\n            onClick={() => orderByChanged(i)}\n          >\n            {x.header}\n          </div>\n        ))}\n      </div>\n\n      <Ranking\n        data={state.data}\n        columns={columns}\n        onSubsetChanged={onRowSelected}\n      />\n      <Chart\n        description={`Details for ${state.subsetDescription}`}\n        subset={state.listeningHistorySubset}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default Table;\n","const Comparer = (x: number, y: number): number => {\n  return x < y ? -1 : x === y ? 0 : 1;\n}\n\nexport default Comparer;","import { useCallback, useEffect } from \"react\";\nimport React from \"react\";\nimport { FixedSizeList } from \"react-window\";\nimport \"./Table.css\";\nimport { StatColumn, StatRow } from \"../models/StatRow\";\nimport Scrollbars from \"react-custom-scrollbars-2\";\nimport { faPlayCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\ninterface RankingProps {\n  onSubsetChanged: (subset: StatRow) => void;\n  data: StatRow[];\n  columns: StatColumn[];\n}\n\nconst Ranking: React.FC<RankingProps> = (props) => {\n  const listRef = React.createRef<FixedSizeList>();\n\n  useEffect(() => {\n    listRef.current?.scrollTo(0);\n  }, [props.data, listRef]);\n\n  const onRowSelected = (row: StatRow) => {\n    props.onSubsetChanged(row);\n  };\n\n  const Row = ({ index, style }: any) => (\n    <div\n      className=\"d-flex stats-row\"\n      style={style}\n      onClick={(_) => onRowSelected(props.data[index])}\n    >\n      {props.columns.map((x) => (\n        <div key={x.header} style={x.style} className=\"data-cell\">\n          {x.isLink && (\n            <a\n              href={x.selector(props.data[index])}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <FontAwesomeIcon icon={faPlayCircle} />\n            </a>\n          )}\n          {!x.isLink && x.selector(props.data[index])}\n        </div>\n      ))}\n    </div>\n  );\n\n  const CustomScrollbars = ({\n    onScroll,\n    forwardedRef,\n    style,\n    children,\n  }: any) => {\n    const refSetter = useCallback(\n      (scrollbarsRef) => {\n        if (scrollbarsRef) {\n          forwardedRef(scrollbarsRef.view);\n        } else {\n          forwardedRef(null);\n        }\n      },\n      [forwardedRef]\n    );\n\n    return (\n      <Scrollbars\n        ref={refSetter}\n        style={{ ...style, overflow: \"hidden\" }}\n        onScroll={onScroll}\n      >\n        {children}\n      </Scrollbars>\n    );\n  };\n\n  const CustomScrollbarsVirtualList = React.forwardRef((props, ref) => (\n    <CustomScrollbars {...props} forwardedRef={ref} />\n  ));\n\n  return (\n    <div className=\"data-items mb-2\">\n      <FixedSizeList\n        height={400}\n        itemCount={props.data.length}\n        itemSize={40}\n        width=\"100%\"\n        outerElementType={CustomScrollbarsVirtualList}\n        ref={listRef}\n      >\n        {Row}\n      </FixedSizeList>\n    </div>\n  );\n};\n\nconst areEqual = (\n  prevProps: RankingProps,\n  nextProps: RankingProps\n): boolean => {\n  return prevProps.data === nextProps.data;\n};\n\nexport default React.memo(Ranking, areEqual);\n","import React from \"react\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\n\nexport interface StatsData {\n  listeningHistory: ListeningEntry[];\n  allData: ListeningEntry[];\n  since: Date;\n  to: Date;\n  minDate: Date;\n  maxDate: Date;\n}\nconst StatsContext = React.createContext<StatsData>({\n  listeningHistory: [],\n  since: new Date(),\n  to: new Date(),\n  allData: [],\n  minDate: new Date(),\n  maxDate: new Date(),\n});\n\nexport const StatsProvider = StatsContext.Provider;\nexport default StatsContext;\n","import { useContext, useState } from \"react\";\nimport React from \"react\";\nimport { ButtonGroup, Button } from \"reactstrap\";\nimport { LineChart, CartesianGrid, XAxis, YAxis, Line, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { from, range } from \"linq-to-typescript\";\nimport Comparer from \"../models/Comparer\";\nimport StatsContext from \"./StatsContext\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\n\nexport interface ChartProps {\n  description: string;\n  subset?: ListeningEntry[];\n}\n\ninterface ChartState {\n  chartFuncId: number;\n}\n\nconst Chart: React.FC<ChartProps> = (props) => {\n  const [state, setState] = useState<ChartState>({ chartFuncId: 0 });\n  const context = useContext(StatsContext);\n  const small = props.subset !== undefined;\n\n  const chartFuncs: ((x: Date) => number)[] = [\n    x => x.getHours(),\n    x => x.getDay() === 0 ? 7 : x.getDay(),\n    x => monthValue(x)\n  ];\n\n  const daysOfWeek: string[] = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n  const xAxisFuncs: ((x: { name: number }) => string)[] = [\n    x => x.name.toString().padStart(2, '0'),\n    x => daysOfWeek[x.name],\n    x => `${(x.name % 100).toString().padStart(2, '0')}.${Math.floor(x.name / 100) - 2000}`\n  ];\n\n  const monthValue = (date: Date): number => date.getFullYear() * 100 + date.getMonth() + 1;\n\n  const monthDiff = (d1: Date, d2: Date) => {\n    let months = 0;\n    months = (d2.getFullYear() - d1.getFullYear()) * 12;\n    months -= d1.getMonth();\n    months += d2.getMonth();\n    return months <= 0 ? 0 : months;\n  }\n\n  const nthMonth = (n: number): number => {\n    const firstDate = new Date(context.since);\n    const nthDate = new Date(firstDate.setMonth(firstDate.getMonth() + n));\n    return monthValue(nthDate);\n  }\n\n  const emptyData: { name: number, totalTime: number, totalPlaybacks: number, mostPlayedTrack: string, mostPlayedArtist: string }[][] = [\n    range(0, 24).select(x => ({ name: x, totalTime: 0, totalPlaybacks: 0, mostPlayedTrack: \"\", mostPlayedArtist: \"\" })).toArray(),\n    range(1, 7).select(x => ({ name: x, totalTime: 0, totalPlaybacks: 0, mostPlayedTrack: \"\", mostPlayedArtist: \"\" })).toArray(),\n    range(0, monthDiff(context.since, context.to)).select(x => ({ name: nthMonth(x), totalTime: 0, totalPlaybacks: 0, mostPlayedTrack: \"\", mostPlayedArtist: \"\" })).toArray()\n  ];\n\n\n  const chartData = from(props.subset !== undefined ? props.subset : context.listeningHistory)\n    .groupBy(x => chartFuncs[state.chartFuncId](x.time))\n    .select(g => ({\n      name: g.key,\n      totalPlaybacks: g.count(),\n      mostPlayedTrack: g.groupBy(x => x.titleUrl).select(x => ({ data: x, count: x.count() })).orderByDescending(x => x.count, Comparer).select(x => `${x.data.first().title} by ${x.data.first().channelName} (${x.count})`).first(),\n      mostPlayedArtist: g.groupBy(x => x.channelUrl).select(x => ({ data: x, count: x.count() })).orderByDescending(x => x.count, Comparer).select(x => `${x.data.first().channelName} (${x.count})`).first()\n    }))\n    .union(emptyData[state.chartFuncId])\n    .groupBy(x => x.name)\n    .select(x => x.first())\n    .toArray();\n\n  if (props.subset !== undefined && props.subset.length === 0) {\n    return (<p>Select a track or an artist in the table to see it's details</p>);\n  }\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload[0].payload?.totalPlaybacks > 0) {\n      return (\n        <div className=\"custom-tooltip\">\n          <p className=\"label\">{label}</p>\n          <p className=\"desc\">Total videos watched: {payload[0].payload.totalPlaybacks}<br />\n            Favorite video: {payload[0].payload.mostPlayedTrack}<br />\n            Favorite channel: {payload[0].payload.mostPlayedArtist}<br />\n          </p>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <React.Fragment>\n      <span className={small ? 'mb-2' : 'section-header mb-3'}>{props.description}</span>\n\n      <ButtonGroup className=\"d-flex mb-3\" size={small ? \"sm\" : \"md\"}>\n        <Button active={state.chartFuncId === 0} color=\"primary\" onClick={() => setState({ chartFuncId: 0 })}>Hours</Button>\n        <Button active={state.chartFuncId === 1} color=\"primary\" onClick={() => setState({ chartFuncId: 1 })}>Days of week</Button>\n        <Button active={state.chartFuncId === 2} color=\"primary\" onClick={() => setState({ chartFuncId: 2 })}>Months</Button>\n      </ButtonGroup>\n      <ResponsiveContainer width=\"100%\" height=\"70%\">\n        <LineChart\n          data={chartData}\n        >\n          <CartesianGrid strokeDasharray=\"5 5\" />\n          <XAxis dataKey={xAxisFuncs[state.chartFuncId]} />\n          <YAxis />\n          <Tooltip content={CustomTooltip} />\n          <Line type=\"monotone\" dataKey=\"totalPlaybacks\" stroke=\"#ff5d5f\" strokeWidth={5} />\n        </LineChart>\n      </ResponsiveContainer>\n    </React.Fragment >);\n}\n\nexport default Chart;","import React, { useContext } from \"react\";\nimport { from } from \"linq-to-typescript\";\nimport StatsContext from \"./StatsContext\";\nimport { round } from \"../common/math.helper\";\nimport DatePicker from \"react-date-picker\";\nimport { Button, ButtonGroup } from \"reactstrap\";\n\nexport interface SummaryProps {\n  dateChanged: (since: Date, to: Date) => void;\n}\n\nconst Summary: React.FC<SummaryProps> = (props) => {\n  const context = useContext(StatsContext);\n\n  const data = from(context.listeningHistory);\n\n  const totalPlayCount = data.count();\n\n  const differentArtists = data\n    .select((x) => x.channelUrl)\n    .distinct()\n    .count();\n\n  const _MS_PER_DAY = 1000 * 60 * 60 * 24;\n  // Discard the time and time-zone information.\n  const utc1 = Date.UTC(\n    context.since.getFullYear(),\n    context.since.getMonth(),\n    context.since.getDate()\n  );\n  const utc2 = Date.UTC(\n    context.to.getFullYear(),\n    context.to.getMonth(),\n    context.to.getDate()\n  );\n\n  const days = Math.floor((utc2 - utc1) / _MS_PER_DAY);\n\n  const summary = {\n    totalPlayCount: totalPlayCount,\n    differentArtists: differentArtists,\n    dailyAverage: round(totalPlayCount / days, 1),\n  };\n\n  const now = new Date();\n\n  return (\n    <React.Fragment>\n      <span className=\"section-header mb-3\">Summary</span>\n      <ButtonGroup className=\"d-flex mb-3\" size=\"sm\">\n        <Button\n          color=\"primary\"\n          onClick={() => props.dateChanged(context.minDate, context.maxDate)}\n        >\n          All time\n        </Button>\n        <Button\n          color=\"primary\"\n          onClick={() =>\n            props.dateChanged(\n              new Date(now.getFullYear() - 1, now.getMonth(), now.getDate()),\n              now\n            )\n          }\n        >\n          Last 12 months\n        </Button>\n        <Button\n          color=\"primary\"\n          onClick={() =>\n            props.dateChanged(\n              new Date(now.getFullYear(), 0, 1, 0, 0, 0, 0),\n              context.maxDate\n            )\n          }\n        >\n          This year\n        </Button>\n      </ButtonGroup>\n\n      <p className=\"text-center\" style={{ fontSize: \"large\" }}>\n        Since{\" \"}\n        <DatePicker\n          value={context.since}\n          clearIcon={null}\n          minDate={context.minDate}\n          maxDate={context.to}\n          onChange={(c: any) => props.dateChanged(c, context.to)}\n        />{\" \"}\n        to{\" \"}\n        <DatePicker\n          value={context.to}\n          clearIcon={null}\n          minDate={context.since}\n          maxDate={context.maxDate}\n          onChange={(c: any) => props.dateChanged(context.since, c)}\n        />{\" \"}\n        you've watched <br />\n        <span className=\"display-2\">{summary.totalPlayCount} videos</span>\n        <br />\n        from{\" \"}\n        <span className=\"display-3\">{summary.differentArtists} channels</span>\n        <br />\n        for an average of{\" \"}\n        <span className=\"display-4\">{summary.dailyAverage} videos a day</span>\n      </p>\n    </React.Fragment>\n  );\n};\n\nexport default Summary;\n","export function round(x: number, precision: number): number {\n    return (Math.round(x * Math.pow(10, precision)) / Math.pow(10, precision));\n}\n\nexport function minutes(timeInMinutes: number): string {\n    const hours = Math.floor(timeInMinutes / 60);\n    const minutes = Math.floor(timeInMinutes) - hours * 60;\n    const seconds = Math.round((timeInMinutes - hours * 60 - minutes) * 60);\n    if (hours > 0)\n        return `${hours}:${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\n    else\n        return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n    \n}","import React, { useEffect, useState } from \"react\";\nimport JSZip from \"jszip\";\nimport Dropzone from \"react-dropzone\";\nimport Table from \"./Table\";\nimport Chart from \"./Chart\";\nimport Summary from \"./Summary\";\nimport \"./Stats.css\";\nimport { from } from \"linq-to-typescript\";\nimport { StatsData, StatsProvider } from \"./StatsContext\";\nimport { WatchEntry } from \"../models/WatchEntry\";\n\ninterface StatsProps {}\n\ninterface StatsState {\n  progress: number;\n  files: File[];\n  jsonFiles: File[];\n  data: StatsData;\n}\n\nconst Stats: React.FC<StatsProps> = (props) => {\n  const [state, setState] = useState<StatsState>({\n    progress: 0,\n    files: [],\n    jsonFiles: [],\n    data: {\n      listeningHistory: [],\n      since: new Date(),\n      to: new Date(),\n      allData: [],\n      minDate: new Date(),\n      maxDate: new Date(),\n    },\n  });\n\n  useEffect(() => {\n    if (state.files.length === 0) return;\n\n    if (state.files[0].name.endsWith(\".zip\")) {\n      const zip = new JSZip();\n      zip.loadAsync(state.files[0]).then((f) => {\n        Promise.all(\n          Object.keys(f.files).map((filename) => {\n            if (!filename.endsWith(\".json\")) return undefined;\n            return f.files[filename].async(\"string\").then((fileData) => {\n              return new File([fileData], filename);\n            });\n          })\n        ).then((res) => {\n          let jsonFiles: File[] = [];\n          res.forEach((r) => {\n            if (r instanceof File) {\n              jsonFiles.push(r);\n            }\n          });\n          setState((s) => ({ ...s, jsonFiles: jsonFiles }));\n        });\n      });\n    } else {\n      setState((s) => ({ ...s, progress: 3 }));\n    }\n  }, [state.files]);\n\n  useEffect(() => {\n    if (state.jsonFiles.length === 0) return;\n\n    Promise.all(state.jsonFiles.map(loadFile)).then((results) => {\n      try {\n        const entries = results\n          .map((r) => JSON.parse(r as string) as WatchEntry[])\n          .flat();\n        entries.forEach(\n          (x) => (x.title = x.title.substring(x.title.indexOf(\" \")))\n        );\n        const ordered = from(entries)\n          .where((x) => x.subtitles && x.subtitles.length > 0)\n          .orderBy((x) => x.time)\n          .groupBy((x) => x.time + x.title)\n          .select((x) => x.first());\n        const listeningEntries = ordered\n          .select((e) => ({\n            title: e.title || \"UNKNOWN\",\n            channelName:\n              e.subtitles?.length > 0 ? e.subtitles[0].name : \"UNKNOWN\",\n            time: new Date(e.time),\n            titleUrl: e.titleUrl,\n            channelUrl:\n              e.subtitles?.length > 0 ? e.subtitles[0].url : \"UNKNOWN\",\n          }))\n          .toArray();\n\n        if (listeningEntries.length === 0) {\n          setState((s) => ({ ...s, progress: 3 }));\n        } else {\n          const from = listeningEntries[0].time;\n          const to = listeningEntries[listeningEntries.length - 1].time;\n          setState((s) => ({\n            ...s,\n            progress: 2,\n            data: {\n              listeningHistory: listeningEntries,\n              since: from,\n              to: to,\n              minDate: from,\n              maxDate: to,\n              allData: listeningEntries,\n            },\n          }));\n          let summary = document.getElementById(\"summary\");\n          if (summary) summary!.scrollIntoView();\n        }\n      } catch (e) {\n        setState((s) => ({ ...s, progress: 3 }));\n      }\n    });\n  }, [state.jsonFiles]);\n\n  const loadFiles = (files: File[]) => {\n    setState({ ...state, progress: 1, files: files });\n  };\n\n  const loadFile = (file: File) =>\n    new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.onload = (e) => {\n        resolve(e.target?.result);\n      };\n      fileReader.onerror = fileReader.onabort = reject;\n      fileReader.readAsText(file);\n    });\n\n  const dateChanged = (since: Date, to: Date) => {\n    const newData = from(state.data.allData)\n      .where((x) => x.time >= since && x.time <= to)\n      .toArray();\n    setState({\n      ...state,\n      data: { ...state.data, since: since, to: to, listeningHistory: newData },\n    });\n  };\n\n  return state.progress === 0 || state.progress === 3 ? (\n    <section>\n      <Dropzone onDrop={loadFiles}>\n        {({ getRootProps, getInputProps }) => (\n          <div {...getRootProps({ className: \"dropzone\" })}>\n            <input {...getInputProps()} />\n            <p>\n              Drag and drop your Google Takeout file here, or click to select\n              file\n            </p>\n          </div>\n        )}\n      </Dropzone>\n      {state.progress === 3 && (\n        <p>\n          Could not load your file. Make sure you've selected the correct Google\n          Takeout file with JSON data inside\n        </p>\n      )}\n    </section>\n  ) : state.progress === 1 ? (\n    <section id=\"otherUnits\">\n      <h2 className=\"text-center display-4\">Loading...</h2>\n    </section>\n  ) : (\n    <React.Fragment>\n      <StatsProvider value={state.data}>\n        <section id=\"summary\">\n          <Summary dateChanged={dateChanged} />\n        </section>\n        <section id=\"chart\">\n          <Chart description=\"Videos watched over time\" />\n        </section>\n        <section id=\"table\">\n          <Table />\n        </section>\n      </StatsProvider>\n    </React.Fragment>\n  );\n};\n\nStats.displayName = Stats.name;\n\nexport default Stats;\n","import React from 'react';\n\nconst About: React.FC = () => {\n    return (\n        <div>\n            <h1>About</h1>\n            <p>This app is made for fun and as a training. None of your data is stored or uploaded, everything is processed locally. It is not related to Google, YouTube or any of it's partners in any way.</p>\n            <a href=\"https://www.flaticon.com/free-icons/music-and-multimedia\" title=\"music and multimedia icons\">Music and multimedia icons created by Smashicons - Flaticon</a>\n        </div>\n    );\n\n}\n\nexport default About;","import React from 'react';\nimport './App.css';\nimport { Layout } from './components/Layout';\nimport { Route } from 'react-router';\nimport { Home } from './components/Home';\nimport Stats from './components/Stats';\nimport { HashRouter } from 'react-router-dom';\nimport About from './components/About';\n\nconst App: React.FC = () => {\n  const baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\n\n  return (\n    <HashRouter basename={baseUrl}>\n      <Layout>\n        <Route exact path='/' component={Home} />\n        <Route path='/stats' component={Stats} />\n        <Route path='/about' component={About} />\n      </Layout>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './custom.scss';\nimport './dark.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}